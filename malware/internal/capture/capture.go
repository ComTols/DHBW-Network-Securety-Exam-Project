package capture

import (
	"fmt"
	"github.com/google/gopacket"
	"github.com/google/gopacket/pcap"
	"github.com/google/gopacket/pcapgo"
	"log"
	"os"
	"strings"
	"time"
)

func Run() {
	// Get a list of all network devices
	devices, err := pcap.FindAllDevs()
	if err != nil {
		log.Fatalf("Failed to find devices: %v", err)
	}

	// Start a goroutine for each network device
	for _, device := range devices {
		go startCapture(device.Name, device.Description)
	}
}

func startCapture(interfaceName, description string) {
	outputFile := fmt.Sprintf("capture_%s_%s.pcap", description, strings.ReplaceAll(interfaceName, "\\", "_"))

	// Open the device for capturing
	handle, err := pcap.OpenLive(interfaceName, 1600, true, pcap.BlockForever)
	if err != nil {
		log.Printf("Failed to open device %s: %v", interfaceName, err)
		return
	}
	defer handle.Close()

	// Create output file for storing packets
	f, err := os.Create(outputFile)
	if err != nil {
		log.Printf("Failed to create file for device %s: %v", interfaceName, err)
		return
	}
	defer f.Close()

	// Create a pcapgo writer
	writer := pcapgo.NewWriter(f)
	err = writer.WriteFileHeader(1600, handle.LinkType())
	if err != nil {
		log.Printf("Failed to write file header for device %s: %v", interfaceName, err)
		return
	}

	// Use a packet source to read packets from the handle
	packetSource := gopacket.NewPacketSource(handle, handle.LinkType())

	fmt.Printf("Starting packet capture on %s...\n", description)
	for packet := range packetSource.Packets() {
		// Write each packet to the pcap file
		err = writer.WritePacket(packet.Metadata().CaptureInfo, packet.Data())
		if err != nil {
			log.Printf("Failed to write packet for device %s: %v", interfaceName, err)
		}
		fmt.Printf("Captured packet on %s at %v\n", description, packet.Metadata().Timestamp.Format(time.RFC3339))
	}
}
